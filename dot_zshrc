[[ $- != *i* ]] && return

if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Homebrew
BREW_PREFIX="${HOMEBREW_PREFIX:-/opt/homebrew}"
if [[ ! -d $BREW_PREFIX ]]; then
  command -v brew >/dev/null 2>&1 && BREW_PREFIX="$(brew --prefix)" || BREW_PREFIX=""
fi

# Powerlevel10k
[[ -r "$BREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme" ]] && source "$BREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme"
[[ -f "$HOME/.p10k.zsh" ]] && source "$HOME/.p10k.zsh"

# zsh-completions
typeset -U fpath
[[ -d "$BREW_PREFIX/share/zsh-completions" ]] && fpath=("$BREW_PREFIX/share/zsh-completions" $fpath)
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/zsh"; mkdir -p "$CACHE_DIR"
autoload -Uz compinit
dump="$CACHE_DIR/.zcompdump-${ZSH_VERSION}"
[[ ! -s $dump ]] && compinit -d "$dump" || compinit -C -d "$dump"

# zsh-autosuggestions
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=#d8dee9'
ZSH_HIGHLIGHT_STYLES[unknown-command]='fg=#d8dee9'
ZSH_AUTOSUGGEST_STRATEGY=(history)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=2000
[[ -r "$BREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]] && source "$BREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

# fzf
typeset -a FZF_BASE_OPTS
typeset -a FZF_OPTIONS
typeset -a _ZO_OPTS
typeset -g NBSP=$'\u00A0'
FZF_BASE_OPTS=(
  "--color=fg:#d8dee9,bg:#2e3440,hl:#b48ead"
  "--color=fg+:#d8dee9,bg+:#2e3440,hl+:#b48ead"
  "--color=info:#8fbcbb,prompt:#8fbcbb,pointer:#8fbcbb"
  "--color=marker:#8fbcbb,spinner:#5e81ac,header:#81a1c1"
  "--color=border:#4c566a"
  "--border=rounded"
  "--info=default"
  "--height=75%"
  "--layout=reverse"
  "--pointer=❯"
  "--no-separator"
  "--no-scrollbar"
  "--prompt=❯${NBSP}"
)
export FZF_DEFAULT_OPTS="${(j: :)FZF_BASE_OPTS}"
typeset -a FZF_FILE_PREVIEW_OPTS
# FZF_FILE_PREVIEW_OPTS=(
#   "--preview"
#   'bat --style=numbers,changes --color=always --paging=never {}'
# )
FZF_FILE_PREVIEW_OPTS=(
  "--preview"
  "'bat --style=numbers,changes --color=always --paging=never {}'"
)

# FZF_OPTIONS=(
#   "--color=fg:#d8dee9,bg:#2e3440,hl:#b48ead"
#   "--color=fg+:#d8dee9,bg+:#2e3440,hl+:#b48ead"
#   "--color=info:#8fbcbb,prompt:#8fbcbb,pointer:#8fbcbb"
#   "--color=marker:#8fbcbb,spinner:#5e81ac,header:#81a1c1"
#   "--color=border:#4c566a"
#   "--border=rounded"
#   "--info=default"
#   "--height=75%"
#   "--layout=reverse"
#   "--pointer=❯"
#   "--no-separator"
#   "--no-scrollbar"
#   "--prompt=❯${NBSP}"
#   "--preview"
#   "'bat --style=numbers,changes --color=always --paging=never {}'"
# )
# export FZF_DEFAULT_OPTS="${(j: :)FZF_OPTIONS}"
_ZO_OPTS=(
  "--no-sort"
  "--height=75%"
  "--reverse"
  "--exit-0"
  "--select-1"
  "--color=fg:#d8dee9,bg:#2e3440,hl:#b48ead"
  "--color=fg+:#d8dee9,bg+:#2e3440,hl+:#b48ead"
  "--color=info:#8fbcbb,prompt:#8fbcbb,pointer:#8fbcbb"
  "--color=marker:#8fbcbb,spinner:#5e81ac,header:#81a1c1"
  "--color=border:#4c566a"
  "--border=rounded"
  "--info=default"
  "--no-separator"
  "--no-scrollbar"
  "--pointer=❯"
  "--prompt=❯${NBSP}"
  "--preview"
  "'([[ -e {2..}/README.md ]] && bat --color=always --style=numbers --line-range=:50 {2..}/README.md) || eza -alo --time-style iso --color=always --group-directories-first -- {2..}'"
  "--preview-window=wrap"
)
export _ZO_FZF_OPTS="${(j: :)_ZO_OPTS}"

# export FZF_DEFAULT_OPTS="${(j: :)FZF_OPTIONS} --prompt=❯${NBSP} --preview=\"bat --style=numbers,changes --color=always --paging=never {}\""
# export _ZO_FZF_OPTS="${(j: :)_ZO_OPTS}"
if command -v fd >/dev/null 2>&1; then
  export FZF_DEFAULT_COMMAND='fd --hidden --follow --exclude .git --exclude node_modules --type f'
  export FZF_ALT_C_COMMAND='fd --hidden --follow --exclude .git --exclude node_modules --type d'
fi

# alias
alias ..='cd ..'
alias vpn="$HOME/Documents/shellscripts/vpn/vpn.sh"
alias vim='nvim'
export EDITOR="nvim"
export VISUAL="nvim"

# function
autoload -Uz add-zsh-hook

after_prompt_once() {
  command -v mise   >/dev/null 2>&1 && eval "$(command mise activate zsh)"

  # 1) 先に _ZO_FZF_OPTS を定義（丸ごとクォート）
  # typeset -a _ZO_OPTS

  # _ZO_OPTS=(
  #   "--no-sort"
  #   "--height=75%"
  #   "--reverse"
  #   "--exit-0"
  #   "--select-1"
  #   "--color=fg:#d8dee9,bg:#2e3440,hl:#b48ead"
  #   "--color=fg+:#d8dee9,bg+:#2e3440,hl+:#b48ead"
  #   "--color=info:#8fbcbb,prompt:#8fbcbb,pointer:#8fbcbb"
  #   "--color=marker:#8fbcbb,spinner:#5e81ac,header:#81a1c1"
  #   "--color=border:#4c566a"
  #   "--border=rounded"
  #   "--info=default"
  #   "--no-separator"
  #   "--no-scrollbar"
  #   "--pointer=❯"
  #   "--prompt=❯${NBSP}"
  #   "--preview=\"([[ -e {2..}/README.md ]] && bat --color=always --style=numbers --line-range=:50 {2..}/README.md) || eza -alo --time-style iso --color=always --group-directories-first -- {2..}\""
  #   "--preview-window=wrap"
  # )
  # export _ZO_FZF_OPTS="${(j: :)_ZO_OPTS}"

  # 2) 後で zoxide を初期化
  command -v zoxide >/dev/null 2>&1 && eval "$(command zoxide init zsh)"

  add-zsh-hook -d precmd after_prompt_once
}
add-zsh-hook precmd after_prompt_once

cd_ls() {
  if [[ $PWD -ef $HOME ]]; then
    return
  fi
  local exclude=(node_modules vendor .venv venv dist build .cache .next target .terraform .git)
  local pattern
  for pattern in "${exclude[@]}"; do
    [[ $PWD == *"/$pattern"* ]] && return
  done
  command eza -al --color=never -o --time-style=long-iso -F always
}
add-zsh-hook chpwd cd_ls

fzf_history() {
  zle -I
  local sel
  sel=$(
    history -n -r 1 \
    | awk '!seen[$0]++' \
    | FZF_DEFAULT_OPTS="${(j: :)FZF_BASE_OPTS} --prompt=❯${NBSP}" fzf --query "$LBUFFER"
  )
  if [[ $? -ne 0 || -z $sel ]]; then
    zle -R; return 0
  fi
  BUFFER=$sel
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N fzf_history
bindkey '^r' fzf_history

fzf_find() {
  setopt localoptions pipefail
  zle -I
  local fzf_opts
  fzf_opts="${(j: :)FZF_BASE_OPTS} --preview 'bat --style=numbers,changes --color=always --paging=never {}'"

  local file
  if command -v fd >/dev/null 2>&1; then
    file=$(
      fd --hidden --follow --exclude .git --exclude node_modules --type f \
      | FZF_DEFAULT_OPTS="$fzf_opts" fzf
    )
  else
    file=$(
      command find . -type d \( -name .git -o -name node_modules \) -prune -o -type f -print \
      | FZF_DEFAULT_OPTS="$fzf_opts" fzf
    )
  fi

  if [[ $? -ne 0 || -z $file ]]; then
    zle -R; return 0
  fi
  BUFFER="nvim ${(q)file}"
  CURSOR=$#BUFFER
  zle accept-line
}
zle -N fzf_find
bindkey '^f' fzf_find

# zsh-syntax-highlighting
if [[ -r "$BREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
  source "$BREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi
