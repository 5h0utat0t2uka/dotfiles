# 非インタラクティブシェルのチェック
[[ $- != *i* ]] && return

# XDG環境変数
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"

# キャッシュディレクトリ
CACHE_DIR="${XDG_CACHE_HOME}/zsh"
mkdir -p "$CACHE_DIR"

# Instant Prompt (P10k)
if [[ -r "${XDG_CACHE_HOME}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Homebrew検出とPATH設定
BREW_PREFIX="${HOMEBREW_PREFIX:-/opt/homebrew}"
typeset -U path
path=(
  "$HOME/.local/bin"(N-/)
  $path
)

# コマンドの確認
install_missing_command() {
  local missing=()
  local -A tools=(
    [rg]=ripgrep
    [eza]=eza
    [bat]=bat
    [fd]=fd
    [fzf]=fzf
  )
  for cmd pkg in ${(kv)tools}; do
    command -v $cmd >/dev/null 2>&1 || missing+=($pkg)
  done
  [[ -n "$missing" ]] && brew install $missing
}
[[ ! -f "$CACHE_DIR/.command_installed" ]] && {
  install_missing_command
  touch "$CACHE_DIR/.command_installed"
}

# History関連とオプション
HISTFILE="$CACHE_DIR/.zsh_history"
HISTSIZE=10000
SAVEHIST=10000
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_REDUCE_BLANKS
setopt SHARE_HISTORY
setopt HIST_VERIFY
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt INTERACTIVE_COMMENTS

# Completions
typeset -U fpath
[[ -d "$BREW_PREFIX/share/zsh-completions" ]] && fpath=("$BREW_PREFIX/share/zsh-completions" $fpath)

autoload -Uz compinit
dump="$CACHE_DIR/.zcompdump-${ZSH_VERSION}"
if [[ -f "$dump.zwc" ]] && [[ "$dump.zwc" -nt "$dump" ]]; then
  compinit -C -d "$dump"
else
  compinit -d "$dump"
  [[ -f "$dump" ]] && zcompile "$dump"
fi

# Powerlevel10k
[[ -r "$BREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme" ]] && \
  source "$BREW_PREFIX/share/powerlevel10k/powerlevel10k.zsh-theme"
[[ -f "$HOME/.p10k.zsh" ]] && source "$HOME/.p10k.zsh"

# エディタ設定
export EDITOR="nvim"
export VISUAL="nvim"

# zsh-autosuggestions
typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[unknown-token]='fg=#d8dee9'
ZSH_HIGHLIGHT_STYLES[unknown-command]='fg=#d8dee9'
ZSH_AUTOSUGGEST_STRATEGY=(history)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=2000
[[ -r "$BREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]] && source "$BREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh"

# fzf
typeset -a FZF_BASE_OPTS
typeset -a FZF_FILE_PREVIEW_OPTS
typeset -a _ZO_OPTS
typeset -g NBSP=$'\u00A0'
FZF_FILE_PREVIEW_OPTS=(
  "--preview"
  "'bat --style=numbers,changes --color=always --paging=never {}'"
)
FZF_BASE_OPTS=(
  "--color=fg:#6b7994,bg:#2e3440,hl:#b48ead"
  "--color=fg+:#d8dee9,bg+:#2e3440,hl+:#b48ead"
  "--color=info:#8fbcbb,prompt:#8fbcbb,pointer:#8fbcbb"
  "--color=marker:#8fbcbb,spinner:#5e81ac,header:#81a1c1"
  "--color=border:#4c566a"
  "--border=rounded"
  "--info=default"
  "--height=75%"
  "--layout=reverse"
  "--pointer=❯"
  "--no-separator"
  "--no-scrollbar"
  "--prompt=❯${NBSP}"
)
export FZF_DEFAULT_OPTS="${(j: :)FZF_BASE_OPTS}"

_ZO_OPTS=(
  "--no-sort"
  "--height=75%"
  "--reverse"
  "--exit-0"
  "--select-1"
  "--color=fg:#6b7994,bg:#2e3440,hl:#b48ead"
  "--color=fg+:#d8dee9,bg+:#2e3440,hl+:#b48ead"
  "--color=info:#8fbcbb,prompt:#8fbcbb,pointer:#8fbcbb"
  "--color=marker:#8fbcbb,spinner:#5e81ac,header:#81a1c1"
  "--color=border:#4c566a"
  "--border=rounded"
  "--info=default"
  "--no-separator"
  "--no-scrollbar"
  "--pointer=❯"
  "--prompt=❯${NBSP}"
  # "--preview"
  # "'([[ -e {2..}/README.md ]] && bat --color=always --style=numbers --line-range=:50 {2..}/README.md) || eza -alo --time-style iso --color=always --group-directories-first -- {2..}'"
  # "eza -alo --time-style iso --color=always --group-directories-first -- {2..}"
  "--preview='eza -al --color=always --group-directories-first \
    -T -L 2 -I \"node_modules|.git|dist|build\" -- {2..}'"
  "--preview-window=wrap"
)
export _ZO_FZF_OPTS="${(j: :)_ZO_OPTS}"
export FZF_DEFAULT_COMMAND='fd --hidden --exclude .git --exclude node_modules --type f'
export FZF_ALT_C_COMMAND='fd --hidden --exclude .git --exclude node_modules --type d'

# alias
alias ..='cd ..'
alias vpn="$HOME/Documents/shellscripts/vpn/vpn.sh"
alias vim='nvim'

# function
autoload -Uz add-zsh-hook
after_prompt_once() {
  command -v mise   >/dev/null 2>&1 && eval "$(command mise activate zsh)"
  command -v zoxide >/dev/null 2>&1 && eval "$(command zoxide init zsh)"
  add-zsh-hook -d precmd after_prompt_once
}
add-zsh-hook precmd after_prompt_once

cd_ls() {
  [[ $PWD -ef $HOME ]] && return
  [[ $PWD =~ '/(node_modules|vendor|\.venv|venv|dist|build|\.cache|\.next|target|\.terraform|\.git)' ]] && return
  command eza -al --color=never -o --time-style=long-iso -F always
}
add-zsh-hook chpwd cd_ls

fzf_history() {
  zle -I
  local sel
  sel=$(
    fc -rl 1 \
    | perl -ne 'print if !$seen{(/^\s*\d+\s+(.*)$/)[0]}++' \
    | sed 's/^[ ]*[0-9]*[ ]*//' \
    | FZF_DEFAULT_OPTS="${(j: :)FZF_BASE_OPTS} --prompt=❯${NBSP}" \
    fzf --query "$LBUFFER"
  )
  [[ -z "$sel" ]] && { zle -R; return 0; }
  BUFFER=$sel
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N fzf_history
bindkey '^r' fzf_history

fzf_find() {
  setopt localoptions pipefail
  zle -I
  local file
  file=$(
    rg --files --hidden \
      --glob '!.git' \
      --glob '!node_modules' \
      --glob '!*.pyc' \
      --glob '!*.swp' \
      --glob '!.DS_Store' \
      --glob '!target' \
      --glob '!dist' \
      --glob '!build' \
    | FZF_DEFAULT_OPTS="${(j: :)FZF_BASE_OPTS} ${(j: :)FZF_FILE_PREVIEW_OPTS}" fzf
  )
  [[ -z "$file" ]] && { zle -R; return 0; }
  BUFFER="nvim ${(q)file}"
  CURSOR=$#BUFFER
  zle accept-line
}
zle -N fzf_find
bindkey '^f' fzf_find

# zsh-syntax-highlighting
if [[ -r "$BREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" ]]; then
  source "$BREW_PREFIX/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
fi

#  .zshrcのコンパイル（次回起動時の高速化）
() {
  local zshrc="$HOME/.zshrc"
  local p10k="$HOME/.p10k.zsh"
  local zwc="$zshrc.zwc"

  if [[ -f "$zshrc" && ( ! -f "$zwc" || "$zshrc" -nt "$zwc" ) ]]; then
    zcompile "$zshrc"
  fi
  if [[ -f "$p10k" && ( ! -f "$p10k.zwc" || "$p10k" -nt "$p10k.zwc" ) ]]; then
    zcompile "$p10k"
  fi
}
